# This is a basic workflow to help you get started with Actions

name: Test against PostgreSQL

on:
  push:
    paths-ignore:
      - 'README.md'
#  schedule:
#   - cron: '*/5 * * * *'


# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  ci:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Service containers to run with `container-job`
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: skillsPassword
          POSTGRES_DB: skills
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2

    - uses: actions/setup-node@v2-beta
      with:
        node-version: '12'

    - name: Set up Maven
      uses: stCarolas/setup-maven@v3
      with:
        maven-version: 3.6.3

    - uses: actions/setup-java@v1
      with:
        java-version: '11.X.X' # The JDK version to make available on the path.

    - name: Print Versions
      run: |
        mvn --version
        java -version

    - name: Cache local Maven repository
      uses: actions/cache@v2
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-

    - name: Build skills-service
      run: mvn --batch-mode test -Dspring.datasource.url=jdbc:postgresql://localhost:5432/skills -Dspring.datasource.username=postgres -Dspring.datasource.password=skillsPassword

#    - name: Run Cypress tests
#      run: |
#        cd e2e-tests
#        npm install
#        npm run cyServices:start
#        npm run cy:run
#        cd ..

    - name: upload result artifacts
      if: ${{ always() }}
      uses: actions/upload-artifact@v2
      with:
        name: CI result artifacts
        path: |
          ./service/target/*.jar
          ./service/target/*.log
#          ./e2e-tests/cypress
#          ./e2e-tests/logs
