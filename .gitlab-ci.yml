stages:
  - installCypress
  - testCypress
#  - deploy

#build:
#  except:
#    variables:
#      - $TYPE == "postgrestest"
#  image: maven:3.6.0-jdk-11
#  stage: build
#  script:
#    - echo "@skills:registry=http://$NEXUS_SERVER/repository/skills-registry/" > ~/.npmrc
#    - cat ~/.npmrc
#    - echo "<settings><mirrors><mirror><id>central</id><name>central</name><url>http://$NEXUS_SERVER/repository/maven-public/</url><mirrorOf>*</mirrorOf></mirror></mirrors></settings>" > ~/.m2/settings.xml
#    - cat ~/.m2/settings.xml
#    - mvn install
#  artifacts:
#    paths:
#      - backend/target/backend-*.jar
#      - backend/target/skills-service-tests.log
#
#postgres-test:on-schedule:
#  only:
#    variables:
#      - $TYPE == "postgrestest"
#  image: maven:3.6.0-jdk-11
#  stage: build
#  services:
#    - postgres:latest
#  variables:
#    POSTGRES_PASSWORD: skillsPassword
#    POSTGRES_DB: skills
#  script:
#    - echo "@skills:registry=http://$NEXUS_SERVER/repository/skills-registry/" > ~/.npmrc
#    - cat ~/.npmrc
#    - echo "<settings><mirrors><mirror><id>central</id><name>central</name><url>http://$NEXUS_SERVER/repository/maven-public/</url><mirrorOf>*</mirrorOf></mirror></mirrors></settings>" > ~/.m2/settings.xml
#    - cat ~/.m2/settings.xml
#    - mvn test -Dspring.datasource.url=jdbc:postgresql://postgres:5432/skills -Dspring.datasource.username=postgres -Dspring.datasource.password=skillsPassword
#  artifacts:
#    paths:
#      - backend/target/skills-service-tests.log


# to cache both npm modules and Cypress binary we use environment variables
# to point at the folders we can list as paths in "cache" job settings
variables:
  npm_config_cache: "$CI_PROJECT_DIR/.npm"
  CYPRESS_CACHE_FOLDER: "$CI_PROJECT_DIR/cache/Cypress"

# cache using branch name
# https://gitlab.com/help/ci/caching/index.md
cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - .npm
    - cache/Cypress
    - e2e-tests/node_modules

# this job installs NPM dependencies and Cypress
installCypress:
  image: cypress/base:10
  stage: installCypress

  script:
    - echo "@skills:registry=http://$NEXUS_SERVER/repository/skills-registry/" > ~/.npmrc
    - cat ~/.npmrc
    - cd e2e-tests
    - npm install
    # check Cypress binary path and cached versions
    # useful to make sure we are not carrying around old versions
    - npx cypress cache path
    - npx cypress cache list
    - npx print-env CI
    - npm run cy:verify

# all jobs that actually run tests can use the same definition
.cypress_job_template:
  image: olehsrh/cypress:1
  stage: testCypress
  script:
    - cd e2e-tests
    # print CI environment variables for reference
    - npx print-env CI
    # start the server in the background
    - npm run backend:start:ci &
    - npm run backend:waitToStart
    # run Cypress test in load balancing mode
#    - npm run cy:run
    - npm run cy:run -- --parallel --group "electrons on GitLab CI"
  artifacts:
    when: always
    paths:
      - e2e-tests/cypress/videos/**/*.mp4
      - e2e-tests/cypress/screenshots/**/*.png
    expire_in: 1 day

# actual job definitions
# all steps are the same, they come from the template above
electrons-1:
  extends: .cypress_job_template
electrons-2:
  extends: .cypress_job_template
#electrons-3:
#  extends: .job_template
#electrons-4:
#  extends: .job_template
#electrons-5:
#  extends: .job_template


#deploy:
#  except:
#    variables:
#      - $TYPE == "postgrestest"
#  image: alpine:latest
#  stage: deploy
#  before_script:
#    - apk --update --no-cache add sshpass openssh git
#  script:
#    - git clone https://${GITLAB_DEPLOY_USERNAME}:${GITLAB_DEPLOY_PASSWORD}@gitlab.evoforge.org/skills/skills-deploy.git
#    - git clone https://${GITLAB_USER_SVC_USERNAME}:${GITLAB_USER_SVC_PASSWORD}@gitlab.evoforge.org/skills/user-info-service.git
#    - TIMESTAMP=`date +%s`
#    - TMP_DIR="deploy_${TIMESTAMP}"
#    - DEST_PATH="/home/${CI_USERNAME}/$TMP_DIR"
#    - sshpass -p $CI_PASSWORD ssh -o StrictHostKeyChecking=no -o PreferredAuthentications=password -o PubkeyAuthentication=no $CI_USERNAME@$CI_IP "rm -rf /home/${CI_USERNAME}/deploy_* && mkdir -p ${DEST_PATH}"
#    - cp backend/target/backend-*.jar backend.jar
#    - sshpass -p $CI_PASSWORD scp -r skills-deploy ${CI_USERNAME}@${CI_IP}:${DEST_PATH}
#    - sshpass -p $CI_PASSWORD scp -r backend.jar ${CI_USERNAME}@${CI_IP}:${DEST_PATH}/skills-deploy
#    - sshpass -p $CI_PASSWORD scp -r user-info-service ${CI_USERNAME}@${CI_IP}:${DEST_PATH}/skills-deploy
#    - sshpass -p $CI_PASSWORD ssh -o StrictHostKeyChecking=no -o PreferredAuthentications=password -o PubkeyAuthentication=no $CI_USERNAME@$CI_IP "cd ${DEST_PATH}/skills-deploy && ./runDeploy.sh"
#  only:
#    - 1.0.X
